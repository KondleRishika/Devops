Data structures are organized ways to store, manage, and retrieve data efficiently. Here are various types of data structures, categorized broadly:

Linear Data Structures

1. Array
   - A collection of elements identified by index or key.
   - Fixed size.
   - Elements are of the same type.
   - Example: `int[] arr = {1, 2, 3, 4, 5};`
code-
#include <stdio.h>
int main() {
    int arr[5] = {1, 2, 3, 4, 5};
    for(int i = 0; i < 5; i++) {
        printf("%d ", arr[i]);
    }
    return 0;
}

2. Linked List
   - A sequence of elements, each containing a reference (link) to the next element.
   - Types: Singly Linked List, Doubly Linked List, Circular Linked List.
   - Example: `head -> node1 -> node2 -> node3 -> null`
code-
#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
void printList(struct Node* n) {
    while(n != NULL) {
        printf("%d ", n->data);
        n = n->next;
    }
}
int main() {
    struct Node* head = NULL;
    struct Node* second = NULL;
    struct Node* third = NULL;
    head = (struct Node*)malloc(sizeof(struct Node));
    second = (struct Node*)malloc(sizeof(struct Node));
    third = (struct Node*)malloc(sizeof(struct Node));
    head->data = 1;
    head->next = second;
    second->data = 2;
    second->next = third;
    third->data = 3;
    third->next = NULL;
    printList(head);
    return 0;
}

3. Stack
   - LIFO (Last In First Out) structure.
   - Operations: push (insert), pop (remove), peek (top element).
   - Example: A stack of plates.
code-
#include <stdio.h>
#include <stdlib.h>
#define MAX 1000
struct Stack {
    int top;
    int arr[MAX];
};
void initStack(struct Stack* stack) {
    stack->top = -1;
}
int isFull(struct Stack* stack) {
    return stack->top == MAX - 1;
}
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}
void push(struct Stack* stack, int value) {
    if (isFull(stack)) {
        printf("Stack overflow\n");
        return;
    }
    stack->arr[++stack->top] = value;
}
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow\n");
        return -1;
    }
    return stack->arr[stack->top--];
}
int main() {
    struct Stack stack;
    initStack(&stack);
    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);
    printf("%d popped from stack\n", pop(&stack));
    return 0;
}
4. Queue
   - FIFO (First In First Out) structure.
   - Operations: enqueue (insert), dequeue (remove), front (first element).
   - Types: Simple Queue, Circular Queue, Priority Queue, Deque (Double-ended queue).
   - Example: A line of people.
code-
#include <stdio.h>
#include <stdlib.h>
#define MAX 1000
struct Queue {
    int front, rear, size;
    unsigned capacity;
    int* array;
};
struct Queue* createQueue(unsigned capacity) {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->capacity = capacity;
    queue->front = queue->size = 0;
    queue->rear = capacity - 1;
    queue->array = (int*)malloc(queue->capacity * sizeof(int));
    return queue;
}
int isFull(struct Queue* queue) {
    return (queue->size == queue->capacity);
}
int isEmpty(struct Queue* queue) {
    return (queue->size == 0);
}
void enqueue(struct Queue* queue, int item) {
    if (isFull(queue)) {
        printf("Queue overflow\n");
        return;
    }
    queue->rear = (queue->rear + 1) % queue->capacity;
    queue->array[queue->rear] = item;
    queue->size = queue->size + 1;
}
int dequeue(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue underflow\n");
        return -1;
    }
    int item = queue->array[queue->front];
    queue->front = (queue->front + 1) % queue->capacity;
    queue->size = queue->size - 1;
    return item;
}
int main() {
    struct Queue* queue = createQueue(1000);
    enqueue(queue, 10);
    enqueue(queue, 20);
    enqueue(queue, 30);
    enqueue(queue, 40);
    printf("%d dequeued from queue\n", dequeue(queue));
    return 0;
}

Non-Linear Data Structures

1. Tree
   - Hierarchical structure with a root node and child nodes forming a tree.
   - Types: Binary Tree, Binary Search Tree, AVL Tree, Red-Black Tree, B-Tree, Trie, etc.
   - Example: Directory structure of a file system.

2. Graph
   - Consists of nodes (vertices) connected by edges.
   - Types: Directed, Undirected, Weighted, Unweighted, Cyclic, Acyclic.
   - Example: Social network connections.

Hash-Based Structures

1. Hash Table
   - Stores key-value pairs.
   - Uses a hash function to compute an index into an array of buckets.
   - Example: Dictionary in Python, HashMap in Java.

 Summary

These are some fundamental data structures used in computer science and software engineering. Each has its own use cases, advantages, and disadvantages. Selecting the right data structure depends on the specific needs of the application, such as the type of operations required (insertion, deletion, searching, etc.), the volume of data, and performance considerations.
